{"mappings":"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","sources":["Desktop/React/Portfolio/new/assets/vendor/typed.js/typed.umd.js","Desktop/React/Portfolio/new/assets/vendor/src/defaults.js","Desktop/React/Portfolio/new/assets/vendor/src/initializer.js","Desktop/React/Portfolio/new/assets/vendor/src/html-parser.js","Desktop/React/Portfolio/new/assets/vendor/src/typed.js"],"sourcesContent":[null,"/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"],"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","initializer","Initializer","_proto","prototype","load","options","elementId","el","document","querySelector","_extends","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","s","trim","style","cssText","Array","slice","apply","children","stringsLength","length","i","push","innerHTML","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","cssDataName","css","createElement","setAttribute","body","appendChild","htmlParser","HTMLParser","typeHtmlChars","curChar","substring","charAt","endTag","backSpaceHtmlChars","Typed","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","_this","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","_this2","classList","contains","remove","humanize","humanizer","numChars","pauseTime","substr","test","skip","exec","parseInt","temporaryPause","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","_this3","complete","_this4","initFadeOut","curStringAtPosition","isTyping","isBlinking","add","speed","Math","round","random","sort","_this5","className","str","_this6","addEventListener","e","insertBefore","nextSibling"],"version":3,"file":"index.334ac09e.js.map","sourceRoot":"/__parcel_source_root/"}