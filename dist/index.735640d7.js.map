{"mappings":"A;;;;;;C,GCAA,CAAA,SAA2CA,CAAAA,EAAMC,CAAAA;IAC1B,YAAA,OAAZC,WAA0C,YAAA,OAAXC,SACxCA,OAAOD,OAAAA,GAAUD,MACQ,cAAA,OAAXG,UAAyBA,OAAOC,GAAAA,GAC9CD,OAAO,EAAA,EAAIH,KACe,YAAA,OAAZC,UACdA,QAAqB,WAAA,GAAID,MAEzBD,EAAkB,WAAA,GAAIC;AAAAA,EACrBK,MAAM;Q,GERLkI,GCEAC;IHOJ,O,I;Q,K,S,C;Y,S,E,C,E,C,E,C;gB,O,K,I,O,c,C,G,G;oB,O;oB,Y,C;oB,c,C;oB,U,C;gB,K,C,C,E,G,G;Y;Y,S,E,C;gB,O,S,C;oB,I,M,O,C,I,O,E;gB,E,M,S,C;oB,I,e,O,U,Q,C,C,O,Q,C,I,Q,C,C,a,E,O,M,I,C;gB,E,M,S,C,E,C;oB,I,G;wB,I,Y,O,G,O,E,G;wB,I,I,O,S,C,Q,C,I,C,G,K,C,G;wB,O,a,K,E,W,I,C,I,E,W,C,I,A,G,U,K,U,I,M,I,C,K,gB,K,2C,I,C,K,E,G,K,K;oB;gB,E,M;oB,M,I,U;gB;Y;Y,S,E,C,E,C;gB,C,Q,K,I,E,M,A,K,C,I,E,M,A;gB,I,I,I,G,I,I,M,I,I,G,I,C,C,E,G,C,C,E;gB,O;Y;YCTA,SAASlI,EAAWC,CAAAA;gBAAyB,IAAjBC,IAAiB,UAAA,MAAA,GAAA,KAAA,KAAA,MAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,EAAA,GAAJ,CAAA,GAEjCC,IAAY,CAAA;gBAGhB,IAAK,IAAIC,KAAOH,EAEZ,IAAIC,KAAc,CAAA,KAAOA,EAAWG,cAAAA,CAAeD,IAAnD;oBAEA,IAAIE,IAAMC,EAAWN,CAAAA,CAAOG,EAAAA;oBAE5BD,CAAAA,CAAUC,EAAAA,GAAOE,GAGbF,EAAII,KAAAA,CAAM,qBACVL,CAAAA,CAAAA,CAAUC,EAAAA,GAAqB,aAAA,OAAPE,IAAyB,MAANA,IAAaA,CAAAA;gBAAAA;gBAKhE,OAAOG,OAAOC,MAAAA,CAAO,CAAA,GAAIR,GAAYC;YAAAA;YAIzC,SAASQ,EAAaC,CAAAA,EAASX,CAAAA;gBAE3B,IAAIY,IAAAA,AACCZ,CAAAA,EAAOa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","sources":["Desktop/React/Portfolio/new/assets/vendor/purecounter/purecounter_vanilla.js","Desktop/React/Portfolio/new/assets/vendor/purecounter/webpack:/PureCounter/webpack/universalModuleDefinition","Desktop/React/Portfolio/new/assets/vendor/purecounter/webpack:/PureCounter/js/purecounter_vanilla.js","Desktop/React/Portfolio/new/assets/vendor/purecounter/webpack:/PureCounter/webpack/bootstrap","Desktop/React/Portfolio/new/assets/vendor/purecounter/webpack:/PureCounter/webpack/startup"],"sourcesContent":[null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PureCounter\"] = factory();\n\telse\n\t\troot[\"PureCounter\"] = factory();\n})(self, function() {\nreturn ","/** This function is for create and merge configuration */\r\nfunction setOptions(config, baseConfig = {}) {\r\n    // Create new Config object;\r\n    var newConfig = {};\r\n\r\n    // Loop config items to set it value into newConfig\r\n    for (var key in config) {\r\n        // if baseConfig is set, only accept the baseconfig property\r\n        if (baseConfig != {} && !baseConfig.hasOwnProperty(key)) continue;\r\n        // parse the config value\r\n        var val = parseValue(config[key]);\r\n        // set the newConfig property value\r\n        newConfig[key] = val;\r\n        // Exclusive for 'duration' or 'pulse' property, recheck the value\r\n        // If it's not a boolean, just set it to milisecond unit\r\n        if (key.match(/duration|pulse/)) {\r\n            newConfig[key] = typeof val != \"boolean\" ? val * 1000 : val;\r\n        }\r\n    }\r\n\r\n    // Finally, we can just merge the baseConfig (if any), with newConfig.\r\n    return Object.assign({}, baseConfig, newConfig);\r\n}\r\n\r\n/** This is the the counter method */\r\nfunction startCounter(element, config) {\r\n    // First, get the increments step\r\n    var incrementsPerStep =\r\n        (config.end - config.start) / (config.duration / config.delay);\r\n    // Next, set the counter mode (Increment or Decrement)\r\n    var countMode = \"inc\";\r\n\r\n    // Set mode to 'decrement' and 'increment step' to minus if start is larger than end\r\n    if (config.start > config.end) {\r\n        countMode = \"dec\";\r\n        incrementsPerStep *= -1;\r\n    }\r\n\r\n    // Next, determine the starting value\r\n    var currentCount = parseValue(config.start);\r\n    // And then print it's value to the page\r\n    element.innerHTML = formatNumber(currentCount, config);\r\n\r\n    // If the config 'once' is true, then set the 'duration' to 0\r\n    if (config.once === true) {\r\n        element.setAttribute(\"data-purecounter-duration\", 0);\r\n    }\r\n\r\n    // Now, start counting with counterWorker using Interval method based on delay\r\n    var counterWorker = setInterval(() => {\r\n        // First, determine the next value base on current value, increment value, and count mode\r\n        var nextNum = nextNumber(currentCount, incrementsPerStep, countMode);\r\n        // Next, print that value to the page\r\n        element.innerHTML = formatNumber(nextNum, config);\r\n        // Now set that value to the current value, because it's already printed\r\n        currentCount = nextNum;\r\n\r\n        // If the value is larger or less than the 'end' (base on mode), then  print the end value and stop the Interval\r\n        if (\r\n            (currentCount >= config.end && countMode == \"inc\") ||\r\n            (currentCount <= config.end && countMode == \"dec\")\r\n        ) {\r\n            element.innerHTML = formatNumber(config.end, config);\r\n            // If 'pulse' is set ignore the 'once' config\r\n            if (config.pulse) {\r\n                // First set the 'duration' to zero\r\n                element.setAttribute(\"data-purecounter-duration\", 0);\r\n                // Next, use timeout to reset it duration back based on 'pulse' config\r\n                setTimeout(() => {\r\n                    element.setAttribute(\r\n                        \"data-purecounter-duration\",\r\n                        config.duration / 1000\r\n                    );\r\n                }, config.pulse);\r\n            }\r\n            clearInterval(counterWorker);\r\n        }\r\n    }, config.delay);\r\n}\r\n\r\n/** This function is to get the next number */\r\nfunction nextNumber(number, steps, mode = \"inc\") {\r\n    // First, get the exact value from the number and step (int or float)\r\n    number = parseValue(number);\r\n    steps = parseValue(steps);\r\n\r\n    // Last, get the next number based on current number, increment step, and count mode\r\n    // Always return it as float\r\n    return parseFloat(mode === \"inc\" ? number + steps : number - steps);\r\n}\r\n\r\n/** This function is to convert number into currency format */\r\nfunction convertNumber(number, config) {\r\n    /** Use converter if filesizing or currency is on */\r\n    if (config.filesizing || config.currency) {\r\n        number = Math.abs(Number(number)); // Get the absolute value of number\r\n\r\n        var baseNumber = 1000, // Base multiplying treshold\r\n            symbol =\r\n                config.currency && typeof config.currency === \"string\"\r\n                    ? config.currency\r\n                    : \"\", // Set the Currency Symbol (if any)\r\n            limit = config.decimals || 1, // Set the decimal limit (default is 1)\r\n            unit = [\"\", \"K\", \"M\", \"B\", \"T\"], // Number unit based exponent threshold\r\n            value = \"\"; // Define value variable\r\n\r\n        /** Changes base number and its unit for filesizing */\r\n        if (config.filesizing) {\r\n            baseNumber = 1024; // Use 1024 instead of 1000\r\n            unit = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]; // Change to 'bytes' unit\r\n        }\r\n\r\n        /** Set value based on the threshold */\r\n        for (var i = 4; i >= 0; i--) {\r\n            // If the exponent is 0\r\n            if (i === 0) value = `${number.toFixed(limit)} ${unit[i]}`;\r\n            // If the exponent is above zero\r\n            if (number >= getFilesizeThreshold(baseNumber, i)) {\r\n                value = `${(number / getFilesizeThreshold(baseNumber, i)).toFixed(\r\n                    limit\r\n                )} ${unit[i]}`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Apply symbol before the value and return it as string\r\n        return symbol + value;\r\n    } else {\r\n        /** Return its value as float if not using filesizing or currency*/\r\n        return parseFloat(number);\r\n    }\r\n}\r\n\r\n/** This function will get the given base.  */\r\nfunction getFilesizeThreshold(baseNumber, index) {\r\n    return Math.pow(baseNumber, index);\r\n}\r\n\r\n/** This function is to get the last formated number */\r\nfunction applySeparator(value, config) {\r\n    // Get replaced value based on it's separator/symbol.\r\n    function replacedValue(val, separator) {\r\n        // Well this is my regExp for detecting the Thausands Separator\r\n        // I use 3 groups to determine it's separator\r\n        // THen the group 4 is to get the decimals value\r\n        var separatorRegExp =\r\n            /^(?:(\\d{1,3},(?:\\d{1,3},?)*)|(\\d{1,3}\\.(?:\\d{1,3}\\.?)*)|(\\d{1,3}(?:\\s\\d{1,3})*))([\\.,]?\\d{0,2}?)$/gi;\r\n\r\n        return val.replace(separatorRegExp, function (match, g1, g2, g3, g4) {\r\n            // set initial result value\r\n            var result = \"\",\r\n                sep = \"\";\r\n            if (g1 !== undefined) {\r\n                // Group 1 is using comma as thausands separator, and period as decimal separator\r\n                result = g1.replace(new RegExp(/,/gi, \"gi\"), separator);\r\n                sep = \",\";\r\n            } else if (g2 !== undefined) {\r\n                // Group 2 is using period as thausands separator, and comma as decimal separator\r\n                result = g2.replace(new RegExp(/\\./gi, \"gi\"), separator);\r\n            } else if (g3 !== undefined) {\r\n                // Group 3 is using space as thausands separator, and comma as decimal separator\r\n                result = g3.replace(new RegExp(/ /gi, \"gi\"), separator);\r\n            }\r\n            if (g4 !== undefined) {\r\n                var decimal = sep !== \",\" ? (separator !== \",\" ? \",\" : \".\") : \".\";\r\n                result +=\r\n                    g4 !== undefined\r\n                        ? g4.replace(new RegExp(/\\.|,/gi, \"gi\"), decimal)\r\n                        : \"\";\r\n            }\r\n            // Returning result value;\r\n            return result;\r\n        });\r\n    }\r\n    // If config formater is not false, then apply separator\r\n    if (config.formater) {\r\n        // Now get the separator symbol\r\n        var symbol = config.separator // if config separator is setted\r\n            ? typeof config.separator === \"string\" // Check the type of value\r\n                ? config.separator // If it's type is string, then apply it's value\r\n                : \",\" // If it's not string (boolean), then apply comma as default separator\r\n            : \"\";\r\n        // Special exception when locale is not 'en-US' but separator value is 'true'\r\n        // Use it's default locale thausands separator.\r\n        if (config.formater !== \"en-US\" && config.separator === true) {\r\n            return value;\r\n        }\r\n        // Return the replaced Value based on it's symbol\r\n        return replacedValue(value, symbol);\r\n    }\r\n    // If config formater is false, then return it's default value\r\n    return value;\r\n}\r\n\r\n/** This function is to get formated number to be printed in the page */\r\nfunction formatNumber(number, config) {\r\n    // This is the configuration for 'toLocaleString' method\r\n    var strConfig = {\r\n        minimumFractionDigits: config.decimals,\r\n        maximumFractionDigits: config.decimals,\r\n    };\r\n    // Get locale from config formater\r\n    var locale = typeof config.formater === \"string\" ? config.formater : undefined;\r\n\r\n    // Set and convert the number base on its config.\r\n    number = convertNumber(number, config);\r\n\r\n    // Now format the number to string base on it's locale\r\n    number = config.formater\r\n        ? number.toLocaleString(locale, strConfig)\r\n        : parseInt(number).toString();\r\n\r\n    // Last, apply the number separator using number as string\r\n    return applySeparator(number, config);\r\n}\r\n\r\n/** This function is to get the parsed value */\r\nfunction parseValue(data) {\r\n    // If number with dot (.), will be parsed as float\r\n    if (/^[0-9]+\\.[0-9]+$/.test(data)) {\r\n        return parseFloat(data);\r\n    }\r\n    // If just number, will be parsed as integer\r\n    if (/^[0-9]+$/.test(data)) {\r\n        return parseInt(data);\r\n    }\r\n    // If it's boolean string, will be parsed as boolean\r\n    if (/^true|false/i.test(data)) {\r\n        return /^true/i.test(data);\r\n    }\r\n    // Return it's value as default\r\n    return data;\r\n}\r\n\r\n// This function is to detect the element is in view or not.\r\nfunction elementIsInView(element) {\r\n    var top = element.offsetTop;\r\n    var left = element.offsetLeft;\r\n    var width = element.offsetWidth;\r\n    var height = element.offsetHeight;\r\n\r\n    while (element.offsetParent) {\r\n        element = element.offsetParent;\r\n        top += element.offsetTop;\r\n        left += element.offsetLeft;\r\n    }\r\n\r\n    return (\r\n        top >= window.pageYOffset &&\r\n        left >= window.pageXOffset &&\r\n        top + height <= window.pageYOffset + window.innerHeight &&\r\n        left + width <= window.pageXOffset + window.innerWidth\r\n    );\r\n}\r\n\r\n/** Just some condition to check browser Intersection Support */\r\nfunction intersectionListenerSupported() {\r\n    return (\r\n        \"IntersectionObserver\" in window &&\r\n        \"IntersectionObserverEntry\" in window &&\r\n        \"intersectionRatio\" in window.IntersectionObserverEntry.prototype\r\n    );\r\n}\r\n\r\n/** Initialize PureCounter */\r\nfunction PureCounter(options = {}) {\r\n    var configs = {\r\n        start: 0, // Starting number [uint]\r\n        end: 100, // End number [uint]\r\n        duration: 2000, // Count duration [milisecond]\r\n        delay: 10, // Count delay [milisecond]\r\n        once: true, // Counting at once or recount when scroll [boolean]\r\n        pulse: false, // Pulse count for certain time [boolean|milisecond]\r\n        decimals: 0, // Decimal places [uint]\r\n        legacy: true, // If this is true it will use the scroll event listener on browsers\r\n        filesizing: false, // Is it for filesize?\r\n        currency: false, // Is it for currency? Use it for set the symbol too [boolean|char|string]\r\n        separator: false, // Do you want to use thausands separator? use it for set the symbol too [boolean|char|string]\r\n        formater: \"us-US\", // Number toLocaleString locale/formater, by default is \"en-US\" [string|boolean:false]\r\n        selector: \".purecounter\", // HTML query selector for spesific element\r\n    };\r\n    var configOptions = setOptions(options, configs);\r\n\r\n    function registerEventListeners() {\r\n        /** Get all elements with class 'purecounter' */\r\n        var elements = document.querySelectorAll(configOptions.selector);\r\n        /** Return if no elements */\r\n        if (elements.length === 0) {\r\n            return;\r\n        }\r\n\r\n        /** Run animateElements base on Intersection Support */\r\n        if (intersectionListenerSupported()) {\r\n            var intersectObserver = new IntersectionObserver(animateElements.bind(this), {\r\n                root: null,\r\n                rootMargin: \"20px\",\r\n                threshold: 0.5,\r\n            });\r\n\r\n            elements.forEach((element) => {\r\n                intersectObserver.observe(element);\r\n            });\r\n        } else {\r\n            if (window.addEventListener) {\r\n                animateLegacy(elements);\r\n                window.addEventListener(\r\n                    \"scroll\",\r\n                    function (e) {\r\n                        animateLegacy(elements);\r\n                    },\r\n                    { passive: true }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /** This legacy to make Purecounter use very lightweight & fast */\r\n    function animateLegacy(elements) {\r\n        elements.forEach((element) => {\r\n            var config = parseConfig(element);\r\n            if (config.legacy === true && elementIsInView(element)) {\r\n                animateElements([element]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Main Element Count Animation */\r\n    function animateElements(elements, observer) {\r\n        elements.forEach((element) => {\r\n            var elm = element.target || element; // Just make sure which element will be used\r\n            var elementConfig = parseConfig(elm); // Get config value on that element\r\n\r\n            // If duration is less than or equal zero, just format the 'end' value\r\n            if (elementConfig.duration <= 0) {\r\n                return (elm.innerHTML = formatNumber(elementConfig.end, elementConfig));\r\n            }\r\n\r\n            if (\r\n                (!observer && !elementIsInView(element)) ||\r\n                (observer && element.intersectionRatio < 0.5)\r\n            ) {\r\n                var value =\r\n                    elementConfig.start > elementConfig.end\r\n                        ? elementConfig.end\r\n                        : elementConfig.start;\r\n                return (elm.innerHTML = formatNumber(value, elementConfig));\r\n            }\r\n\r\n            // If duration is more than 0, then start the counter\r\n            setTimeout(() => {\r\n                return startCounter(elm, elementConfig);\r\n            }, elementConfig.delay);\r\n        });\r\n    }\r\n\r\n    /** This function is to generate the element Config */\r\n    function parseConfig(element) {\r\n        // First, we need to declare the base Config\r\n        // This config will be used if the element doesn't have config\r\n        var baseConfig = configOptions;\r\n\r\n        // Next, get all 'data-precounter-*' attributes value. Store to array\r\n        var configValues = [].filter.call(element.attributes, function (attr) {\r\n            return /^data-purecounter-/.test(attr.name);\r\n        });\r\n\r\n        // Now, we create element config as an object\r\n        var elementConfig =\r\n            configValues.length != 0\r\n                ? Object.assign(\r\n                      {},\r\n                      ...configValues.map(({ name, value }) => {\r\n                          var key = name.replace(\"data-purecounter-\", \"\").toLowerCase(),\r\n                              val = parseValue(value);\r\n\r\n                          return { [key]: val };\r\n                      })\r\n                  )\r\n                : {};\r\n\r\n        // Last setOptions and return\r\n        return setOptions(elementConfig, baseConfig);\r\n    }\r\n\r\n    /** Run the initial function */\r\n    registerEventListeners();\r\n}\r\n\r\nmodule.exports = PureCounter;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(638);\n"],"names":["root","factory","exports","module","define","amd","self","setOptions","config","baseConfig","newConfig","key","hasOwnProperty","val","parseValue","match","Object","assign","startCounter","element","incrementsPerStep","end","start","duration","delay","countMode","currentCount","innerHTML","formatNumber","once","setAttribute","counterWorker","setInterval","nextNum","number","steps","mode","parseFloat","nextNumber","pulse","setTimeout","clearInterval","getFilesizeThreshold","baseNumber","index","Math","pow","strConfig","minimumFractionDigits","decimals","maximumFractionDigits","locale","formater","undefined","filesizing","currency","abs","Number","symbol","limit","unit","value","i","toFixed","convertNumber","separator","replace","g1","g2","g3","g4","result","sep","RegExp","decimal","applySeparator","toLocaleString","parseInt","toString","data","test","elementIsInView","top","offsetTop","left","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","window","pageYOffset","pageXOffset","innerHeight","innerWidth","intersectionListenerSupported","IntersectionObserverEntry","prototype","options","configs","legacy","selector","configOptions","registerEventListeners","elements","document","querySelectorAll","length","intersectObserver","IntersectionObserver","animateElements","bind","this","rootMargin","threshold","forEach","observe","addEventListener","animateLegacy","e","passive","parseConfig","observer","elm","target","elementConfig","intersectionRatio","configValues","filter","call","attributes","attr","name","map","toLowerCase","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"version":3,"file":"index.735640d7.js.map","sourceRoot":"/__parcel_source_root/"}